#https://www.tutorialspoint.com/unix_terminal_online.php

#present working directory
pwd
# listing all directories and files
ls -lrta
##ls -a will list all files including hidden files (files with names beginning with a dot).
ls -F gives a full listing, indicating what type files are by putting a slash after directories and a star after executable files (programs you can run).
ls -l gives a long listing of all files. Here is an example section of the output of ls -l :
drwxr-xr-x   6 eva        users         1024 Jun  8 16:46 sabon
-rw-------   1 eva        users         1564 Apr 28 14:35 splus
What does it all mean?
The first column gives the type of the file (e.g., directory or ordinary file) and the file permissions.
The second column is the number of links to the file i.e., (more or less) the number of names there are for the file. Generally an ordinary file will only have one link, but a directory will have more, because you can refer to it as ``dirname'', ``dirname/.'' where the dot means ``current directory'', and if it has a subdirectory named ``subdir'', ``dirname/subdir/..'' (the ``..'' means ``parent directory'').
The third and fourth columns are the user who owns the file and the Unix group of users to which the file belongs. You almost certainly don't need to worry about Unix groups, as you probably only belong to the default group ``users''.
The fifth column is the size of the file in bytes.
The next three columns are the time at which the file was last changed (for a directory, ths is the time at which a file in that directory was last created or deleted).
The last column is the name of the file.
ls -R gives a recursive listing, including the contents of all subdirectories and their subdirectories and so on.
ls -t lists the files in order of the time when they were last modified (newest first) rather than in alphabetical order.
ls -r lists the files in the reverse of the order that they would otherwise have been listed in. Thus, ls -lrt will give a long listing, oldest first, which is handy for seeing which files in a large directory have recently been changed.
mkdir testdir

cd testdir

#ctrl +d indicates end of file
# ctrl+c indicates kill process. 

#create an empty file
touch file1.txt

cat > file2.txt
"Hello Java"
ctrl+d

# edit a file
vi file2.txt
## press insert and type data
## press escape and type :wq for save and exit and only :q! to exit.

## To read TOP grep trail

# head : prints first 2 lines of the file
head -2 filename.txt

# tail: prints last 2 lines of the file and follows
tail -2f filename.txt
#tail: just prints last 2 lines of the file
tail -2 filename.txt
#ctrl C is to kill the process, ctrl D is the end of file.

#Search for the given string in a single file
grep "Hello" testFile2.txt
# Case insensitive grep
grep -i "hello" testFile2.txt
#regular expression using grep
grep -i ".*wo.*" testFile2.txt.
#search full word
grep -iw "world" testfile2.txt
# Print 3 lines after a match happens
grep -A3 "Unix" textFile2.txt
# Print 3 lines before match happens
grep -B3 "unix" testFile2.txt
#recruisive search using grep
grep -ir "unix" testFile2.txt
#ps command
ps -aux
ps -ef

#search in current directory and all its sub directory

find . -name *.txt

#search in specific directory and all its sub diretory

find /home/ci-cd -name *.yml

#adding type: this will search a folder with name forder1 in current dir or all its sub dir.

find . -type d -name folder1

#GETTING PROCESS IF
pidof firefox

# kill a process by force
kill -9 pid1 pid2

ps -aux | grep firefox


#chmod here 777 means for user, group and other read,write and execute


# 	Permission 	rwx 	Binary
#7 	read, write and execute 	rwx 	111
#6 	read and write 	rw- 	110
#5 	read and execute 	r-x 	101
#4 	read only 	r-- 	100
#3 	write and execute 	-wx 	011
#2 	write only 	-w- 	010
#1 	execute only 	--x 	001
#0 	none 	--- 	000 



chmod 777 fileName

#copy
cp file1 destination
cp testfile2.txt root

#mov

mv testfile2.txt root

whoami
#above command shows the user name